import { observable } from "@legendapp/state";
import { ObservablePersistLocalStorage } from "@legendapp/state/persist-plugins/local-storage";
import { configureSynced, synced } from "@legendapp/state/sync";
import z from "zod";

const localSynced = configureSynced(synced, {
  persist: {
    plugin: ObservablePersistLocalStorage,
    retrySync: true, // Persist pending changes and retry
  },
  retry: {
    infinite: true, // Retry changes with exponential backoff
  },
});
// Create an observable with "todos" persisted
export const categories$ = observable(
  localSynced({
    initial: {
      credit: ["Income", "Investment", "Salary", "Other"],
      debit: [
        "Food & Dining",
        "Transportation",
        "Shopping",
        "Entertainment",
        "Bills & Utilities",
        "Healthcare",
        "Education",
        "Travel",
        "Other",
      ],
    },
    persist: {
      name: "categories",
    },
  })
);


export const currencies = [
  "1inch",
  "aave",
  "ada",
  "aed",
  "afn",
  "agix",
  "akt",
  "algo",
  "all",
  "amd",
  "amp",
  "ang",
  "aoa",
  "ape",
  "apt",
  "ar",
  "arb",
  "ars",
  "atom",
  "ats",
  "aud",
  "avax",
  "awg",
  "axs",
  "azm",
  "azn",
  "bake",
  "bam",
  "bat",
  "bbd",
  "bch",
  "bdt",
  "bef",
  "bgn",
  "bhd",
  "bif",
  "bmd",
  "bnb",
  "bnd",
  "bob",
  "brl",
  "bsd",
  "bsv",
  "bsw",
  "btc",
  "btg",
  "btn",
  "btt",
  "busd",
  "bwp",
  "byn",
  "byr",
  "bzd",
  "cad",
  "cake",
  "cdf",
  "celo",
  "cfx",
  "chf",
  "chz",
  "clp",
  "cnh",
  "cny",
  "comp",
  "cop",
  "crc",
  "cro",
  "crv",
  "cspr",
  "cuc",
  "cup",
  "cve",
  "cvx",
  "cyp",
  "czk",
  "dai",
  "dash",
  "dcr",
  "dem",
  "dfi",
  "djf",
  "dkk",
  "doge",
  "dop",
  "dot",
  "dydx",
  "dzd",
  "eek",
  "egld",
  "egp",
  "enj",
  "eos",
  "ern",
  "esp",
  "etb",
  "etc",
  "eth",
  "eur",
  "eurc",
  "fei",
  "fil",
  "fim",
  "fjd",
  "fkp",
  "flow",
  "flr",
  "frax",
  "frf",
  "ftt",
  "gala",
  "gbp",
  "gel",
  "ggp",
  "ghc",
  "ghs",
  "gip",
  "gmd",
  "gmx",
  "gnf",
  "gno",
  "grd",
  "grt",
  "gt",
  "gtq",
  "gusd",
  "gyd",
  "hbar",
  "hkd",
  "hnl",
  "hnt",
  "hot",
  "hrk",
  "ht",
  "htg",
  "huf",
  "icp",
  "idr",
  "iep",
  "ils",
  "imp",
  "imx",
  "inj",
  "inr",
  "iqd",
  "irr",
  "isk",
  "itl",
  "jep",
  "jmd",
  "jod",
  "jpy",
  "kas",
  "kava",
  "kcs",
  "kda",
  "kes",
  "kgs",
  "khr",
  "klay",
  "kmf",
  "knc",
  "kpw",
  "krw",
  "ksm",
  "kwd",
  "kyd",
  "kzt",
  "lak",
  "lbp",
  "ldo",
  "leo",
  "link",
  "lkr",
  "lrc",
  "lrd",
  "lsl",
  "ltc",
  "ltl",
  "luf",
  "luna",
  "lunc",
  "lvl",
  "lyd",
  "mad",
  "mana",
  "mbx",
  "mdl",
  "mga",
  "mgf",
  "mina",
  "mkd",
  "mkr",
  "mmk",
  "mnt",
  "mop",
  "mro",
  "mru",
  "mtl",
  "mur",
  "mvr",
  "mwk",
  "mxn",
  "mxv",
  "myr",
  "mzm",
  "mzn",
  "nad",
  "near",
  "neo",
  "nexo",
  "nft",
  "ngn",
  "nio",
  "nlg",
  "nok",
  "npr",
  "nzd",
  "okb",
  "omr",
  "one",
  "op",
  "ordi",
  "pab",
  "paxg",
  "pen",
  "pepe",
  "pgk",
  "php",
  "pkr",
  "pln",
  "pol",
  "pte",
  "pyg",
  "qar",
  "qnt",
  "qtum",
  "rol",
  "ron",
  "rpl",
  "rsd",
  "rub",
  "rune",
  "rvn",
  "rwf",
  "sand",
  "sar",
  "sbd",
  "scr",
  "sdd",
  "sdg",
  "sek",
  "sgd",
  "shib",
  "shp",
  "sit",
  "skk",
  "sle",
  "sll",
  "snx",
  "sol",
  "sos",
  "spl",
  "srd",
  "srg",
  "std",
  "stn",
  "stx",
  "sui",
  "svc",
  "syp",
  "szl",
  "thb",
  "theta",
  "tjs",
  "tmm",
  "tmt",
  "tnd",
  "ton",
  "top",
  "trl",
  "trx",
  "try",
  "ttd",
  "tusd",
  "tvd",
  "twd",
  "twt",
  "tzs",
  "uah",
  "ugx",
  "uni",
  "usd",
  "usdc",
  "usdd",
  "usdp",
  "usdt",
  "uyu",
  "uzs",
  "val",
  "veb",
  "ved",
  "vef",
  "ves",
  "vet",
  "vnd",
  "vuv",
  "waves",
  "wemix",
  "woo",
  "wst",
  "xaf",
  "xag",
  "xau",
  "xaut",
  "xbt",
  "xcd",
  "xcg",
  "xch",
  "xdc",
  "xdr",
  "xec",
  "xem",
  "xlm",
  "xmr",
  "xof",
  "xpd",
  "xpf",
  "xpt",
  "xrp",
  "xtz",
  "yer",
  "zar",
  "zec",
  "zil",
  "zmk",
  "zmw",
  "zwd",
  "zwg",
  "zwl",
] as const;
export const currencyValidator = z.enum(currencies);
export type Currency = (typeof currencies)[number];
export const defaultCurrency$ = observable(
  localSynced({
    initial: "usd" as Currency,
    persist: {
      name: "defaultCurrency",
    },
  })
);


type CurrenciesApiResponse = {
  date: string;
} & {
  [K in Currency]: {
    [K2 in Currency]: number;
  };
};
const initialExchangeRates = {
  date: "2025-08-22",
  usd: {
    "1inch": 4.03000587,
    aave: 0.0033101014,
    ada: 1.15535257,
    aed: 3.6725,
    afn: 68.38282267,
    agix: 3.48781053,
    akt: 0.86406503,
    algo: 4.03944938,
    all: 83.65789859,
    amd: 383.03673509,
    amp: 283.61374254,
    ang: 1.80417335,
    aoa: 917.64771572,
    ape: 1.69403537,
    apt: 0.22543513,
    ar: 0.14900183,
    arb: 2.00990075,
    ars: 1314.55120058,
    atom: 0.22540463,
    ats: 11.85405757,
    aud: 1.55722969,
    avax: 0.043642867,
    awg: 1.79,
    axs: 0.44036635,
    azm: 8500.95685341,
    azn: 1.70019137,
    bake: 12.32470201,
    bam: 1.68488488,
    bat: 6.76100869,
    bbd: 2,
    bch: 0.0017887325,
    bdt: 121.79150562,
    bef: 34.75153136,
    bgn: 1.68488488,
    bhd: 0.376,
    bif: 2983.27855039,
    bmd: 1,
    bnb: 0.0011826866,
    bnd: 1.28934934,
    bob: 6.92422373,
    brl: 5.46641204,
    bsd: 1,
    bsv: 0.039049696,
    bsw: 37.18315398,
    btc: 0.0000088472,
    btg: 2.17617869,
    btn: 87.32341093,
    btt: 1533468.89848356,
    busd: 0.9994867,
    bwp: 14.06137242,
    byn: 3.36806215,
    byr: 33680.62147521,
    bzd: 2.01252427,
    cad: 1.39117541,
    cake: 0.37909854,
    cdf: 2896.75341613,
    celo: 3.14748099,
    cfx: 5.67292245,
    chf: 0.80978289,
    chz: 25.31498529,
    clp: 970.80313249,
    cnh: 7.18706496,
    cny: 7.18417082,
    comp: 0.022135883,
    cop: 4031.15139702,
    crc: 504.93703228,
    cro: 7.03920967,
    crv: 1.1602504,
    cspr: 95.78139285,
    cuc: 1,
    cup: 24.02827111,
    cve: 94.99407196,
    cvx: 0.25095038,
    cyp: 0.5041948,
    czk: 21.17537437,
    dai: 0.99995964,
    dash: 0.045420514,
    dcr: 0.060178486,
    dem: 1.68488488,
    dfi: 1574.2413791,
    djf: 178.03010499,
    dkk: 6.43066845,
    doge: 4.61098916,
    dop: 62.28236006,
    dot: 0.26224772,
    dydx: 1.57339967,
    dzd: 129.94974085,
    eek: 13.47907904,
    egld: 0.06779095,
    egp: 48.49073315,
    enj: 14.56785127,
    eos: 2.03822671,
    ern: 15,
    esp: 143.33620801,
    etb: 141.77566417,
    etc: 0.047383886,
    eth: 0.000239653,
    eur: 0.86146796,
    eurc: 0.86192684,
    fei: 1.00961742,
    fil: 0.4174225,
    fim: 5.12205589,
    fjd: 2.27444993,
    fkp: 0.7456379,
    flow: 2.68782322,
    flr: 43.67732651,
    frax: 0.36806173,
    frf: 5.65085939,
    ftt: 1.09467702,
    gala: 61.56166599,
    gbp: 0.7456379,
    gel: 2.70201853,
    ggp: 0.7456379,
    ghc: 110051.39472156,
    ghs: 11.00513947,
    gip: 0.7456379,
    gmd: 72.49278821,
    gmx: 0.066851629,
    gnf: 8682.02597337,
    gno: 0.0077278158,
    grd: 293.54520741,
    grt: 11.14775059,
    gt: 0.054648585,
    gtq: 7.67258015,
    gusd: 0.99951186,
    gyd: 209.34632843,
    hbar: 4.22988563,
    hkd: 7.81353033,
    hnl: 26.18457572,
    hnt: 0.38650848,
    hot: 1045.45379581,
    hrk: 6.49073035,
    ht: 0.98747064,
    htg: 131.21577659,
    huf: 341.39697598,
    icp: 0.195877,
    idr: 16351.63874224,
    iep: 0.67846115,
    ils: 3.40682742,
    imp: 0.7456379,
    imx: 1.86951809,
    inj: 0.075357081,
    inr: 87.32341093,
    iqd: 1310.92295775,
    irr: 42042.25236745,
    isk: 123.5393761,
    itl: 1668.03456715,
    jep: 0.7456379,
    jmd: 160.57566784,
    jod: 0.709,
    jpy: 148.5668141,
    kas: 11.59203032,
    kava: 2.68387961,
    kcs: 0.080865686,
    kda: 2.6329716,
    kes: 129.4250354,
    kgs: 87.4646924,
    khr: 4005.69357873,
    klay: 6.89339493,
    kmf: 423.81445404,
    knc: 2.60093675,
    kpw: 899.97638538,
    krw: 1398.97060774,
    ksm: 0.069477389,
    kwd: 0.30594161,
    kyd: 0.83221403,
    kzt: 538.17699748,
    lak: 21657.51336074,
    lbp: 90154.21946238,
    ldo: 0.78377791,
    leo: 0.10382506,
    link: 0.040318326,
    lkr: 302.52464019,
    lrc: 11.48745943,
    lrd: 200.68568732,
    lsl: 17.72141862,
    ltc: 0.008673635,
    ltl: 2.97447657,
    luf: 34.75153136,
    luna: 6.55319953,
    lunc: 16827.00743705,
    lvl: 0.60543968,
    lyd: 5.4315245,
    mad: 9.02171077,
    mana: 3.60709433,
    mbx: 5.82876278,
    mdl: 16.76552063,
    mga: 4423.97763811,
    mgf: 22119.88819057,
    mina: 5.55163961,
    mkd: 52.94562824,
    mkr: 0.00062044796,
    mmk: 2098.66348921,
    mnt: 3597.1053997,
    mop: 8.04793624,
    mro: 395.75397807,
    mru: 39.57539781,
    mtl: 0.3698282,
    mur: 45.73465933,
    mvr: 15.44244324,
    mwk: 1736.21515802,
    mxn: 18.75211963,
    mxv: 2.1960138,
    myr: 4.23107603,
    mzm: 63853.37575883,
    mzn: 63.85337576,
    nad: 17.72141862,
    near: 0.40726481,
    neo: 0.15075788,
    nexo: 0.77061394,
    nft: 2159511.39406136,
    ngn: 1538.48384404,
    nio: 36.82568439,
    nlg: 1.89842556,
    nok: 10.18157699,
    npr: 139.78295005,
    nzd: 1.71929469,
    okb: 0.0038994381,
    omr: 0.38489428,
    one: 92.64292767,
    op: 1.3969405,
    ordi: 0.11460175,
    pab: 1,
    paxg: 0.00030032273,
    pen: 3.50861769,
    pepe: 95832.26809171,
    pgk: 4.22535158,
    php: 57.06915606,
    pkr: 283.90026448,
    pln: 3.66586788,
    pol: 4.22641223,
    pte: 172.70881958,
    pyg: 7242.5486721,
    qar: 3.64,
    qnt: 0.0094149324,
    qtum: 0.44725886,
    rol: 43538.7441347,
    ron: 4.35387441,
    rpl: 0.13910845,
    rsd: 100.93894977,
    rub: 80.59878758,
    rune: 0.78091457,
    rvn: 75.39974556,
    rwf: 1448.9233422,
    sand: 3.62367702,
    sar: 3.75,
    sbd: 8.4745935,
    scr: 14.58864211,
    sdd: 60020.5341262,
    sdg: 600.20534126,
    sek: 9.6229222,
    sgd: 1.28934934,
    shib: 80392.35751695,
    shp: 0.7456379,
    sit: 206.44218196,
    skk: 25.95258377,
    sle: 22.74526512,
    sll: 22745.26512367,
    snx: 1.53789874,
    sol: 0.0054945594,
    sos: 571.28069377,
    spl: 0.16666667,
    srd: 37.71657121,
    srg: 37716.57120836,
    std: 21233.73324297,
    stn: 21.23373324,
    stx: 1.52318361,
    sui: 0.2915938,
    svc: 8.75,
    syp: 13002.58731744,
    szl: 17.72141862,
    thb: 32.68038022,
    theta: 1.28737049,
    tjs: 9.39414903,
    tmm: 17492.23588892,
    tmt: 3.49844718,
    tnd: 2.89513895,
    ton: 0.30065089,
    top: 2.39039242,
    trl: 41017524.40028092,
    trx: 2.81867811,
    try: 41.0175244,
    ttd: 6.78951166,
    tusd: 1.00213021,
    tvd: 1.55722969,
    twd: 30.64604694,
    twt: 1.29207783,
    tzs: 2487.85246707,
    uah: 41.26142876,
    ugx: 3567.5788161,
    uni: 0.097069609,
    usd: 1,
    usdc: 0.99423806,
    usdd: 0.99957385,
    usdp: 0.99927199,
    usdt: 1.00017435,
    uyu: 40.29269072,
    uzs: 12464.46752824,
    val: 1668.03456715,
    veb: 13924129544.077433,
    ved: 139.23309489,
    vef: 13923309.48889188,
    ves: 139.23309489,
    vet: 42.377524,
    vnd: 26395.72017861,
    vuv: 120.05877333,
    waves: 0.77094012,
    wemix: 1.22637402,
    woo: 13.86696206,
    wst: 2.71568265,
    xaf: 565.08593872,
    xag: 0.026225064,
    xau: 0.0002998948,
    xaut: 0.00029956087,
    xbt: 0.0000088472,
    xcd: 2.70694054,
    xcg: 1.80417335,
    xch: 0.10670416,
    xdc: 12.14572015,
    xdr: 0.73166942,
    xec: 50699.03558842,
    xem: 418.43618502,
    xlm: 2.5435647,
    xmr: 0.0038677136,
    xof: 565.08593872,
    xpd: 0.0008968574,
    xpf: 102.80047257,
    xpt: 0.0007411192,
    xrp: 0.34970786,
    xtz: 1.25801886,
    yer: 240.16289144,
    zar: 17.72141862,
    zec: 0.023729581,
    zil: 88.59282325,
    zmk: 23288.71720561,
    zmw: 23.28871721,
    zwd: 361.9,
    zwg: 26.82834579,
    zwl: 67036.63686531,
  },
} as CurrenciesApiResponse;

export const currencies$ = observable(
  localSynced({
    get: () =>
      fetch(
        `https://latest.currency-api.pages.dev/v1/currencies/${defaultCurrency$.get()}.json`
      ).then((res) => res.json()),
    mode: "set",
    syncMode: "auto",
    persist: {
      name: "currency",
      readonly: true,
    },
    subscribe: ({ refresh, value$ }) => {
      const value = value$.get();
      if (new Date(value.date).toDateString() !== new Date().toDateString()) {
        refresh();
      }
    },
    transform: {
      load: (value: typeof initialExchangeRates) => {
        return {
          date: value.date,
          exchangeRates: value[defaultCurrency$.get()],
        };
      },
    },
    initial: initialExchangeRates,
  })
);
